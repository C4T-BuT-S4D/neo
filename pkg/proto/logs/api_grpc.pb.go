// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: logs/api.proto

package logs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	AddLogLines(ctx context.Context, in *AddLogLinesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchLogLines(ctx context.Context, in *SearchLogLinesRequest, opts ...grpc.CallOption) (Service_SearchLogLinesClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AddLogLines(ctx context.Context, in *AddLogLinesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logs.Service/AddLogLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchLogLines(ctx context.Context, in *SearchLogLinesRequest, opts ...grpc.CallOption) (Service_SearchLogLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], "/logs.Service/SearchLogLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceSearchLogLinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_SearchLogLinesClient interface {
	Recv() (*SearchLogLinesResponse, error)
	grpc.ClientStream
}

type serviceSearchLogLinesClient struct {
	grpc.ClientStream
}

func (x *serviceSearchLogLinesClient) Recv() (*SearchLogLinesResponse, error) {
	m := new(SearchLogLinesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	AddLogLines(context.Context, *AddLogLinesRequest) (*emptypb.Empty, error)
	SearchLogLines(*SearchLogLinesRequest, Service_SearchLogLinesServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) AddLogLines(context.Context, *AddLogLinesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogLines not implemented")
}
func (UnimplementedServiceServer) SearchLogLines(*SearchLogLinesRequest, Service_SearchLogLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchLogLines not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AddLogLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddLogLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logs.Service/AddLogLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddLogLines(ctx, req.(*AddLogLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SearchLogLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchLogLinesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).SearchLogLines(m, &serviceSearchLogLinesServer{stream})
}

type Service_SearchLogLinesServer interface {
	Send(*SearchLogLinesResponse) error
	grpc.ServerStream
}

type serviceSearchLogLinesServer struct {
	grpc.ServerStream
}

func (x *serviceSearchLogLinesServer) Send(m *SearchLogLinesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLogLines",
			Handler:    _Service_AddLogLines_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchLogLines",
			Handler:       _Service_SearchLogLines_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logs/api.proto",
}
