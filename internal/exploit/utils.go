package exploit

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"time"

	"github.com/sirupsen/logrus"

	neopb "neo/lib/genproto/neo"
	"neo/pkg/archive"
)

func saveExploit(f *os.File, outPath string, cfg *neopb.ExploitConfiguration) (string, error) {
	if cfg.GetIsArchive() {
		if err := archive.Untar(outPath, f); err != nil {
			return "", fmt.Errorf("unarchiving: %w", err)
		}
		return filepath.Join(outPath, cfg.GetEntrypoint()), nil
	}

	if err := f.Close(); err != nil {
		return "", fmt.Errorf("closing file: %w", err)
	}
	if err := os.Rename(f.Name(), outPath); err != nil {
		return "", fmt.Errorf("renaming file %s to %s: %w", f.Name(), outPath, err)
	}
	return outPath, nil
}

func prepareEntry(path string) (string, error) {
	absPath, err := filepath.Abs(path)
	if err != nil {
		return "", fmt.Errorf("taking absolute path: %w", err)
	}
	if err := os.Chmod(absPath, 0755); err != nil {
		return "", fmt.Errorf("setting permissions: %w", err)
	}
	return absPath, nil
}

func submitResults(ctx context.Context, farmURL, farmPass string, results []Result) error {
	// For destructive farm only now.
	url := farmURL + "/api/post_flags"

	toSend := make([]Result, len(results))
	copy(toSend, results)

	for i := range toSend {
		toSend[i].Exploit = "[neo] " + toSend[i].Exploit
	}

	data, err := json.Marshal(toSend)
	if err != nil {
		return fmt.Errorf("could not dump results: %w", err)
	}
	req, err := http.NewRequestWithContext(ctx, "POST", url, bytes.NewReader(data))
	if err != nil {
		return fmt.Errorf("creating request: %w", err)
	}
	req.Header.Set("Authorization", farmPass)
	req.Header.Add("X-Token", farmPass)
	req.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return fmt.Errorf("making request: %w", err)
	}
	defer func() {
		if err := resp.Body.Close(); err != nil {
			logrus.Errorf("Error closing submission response body: %v", err)
		}
	}()
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to submit flags to farm with code = %d", resp.StatusCode)
	}
	return nil
}

func retryLoop(ctx context.Context, name string, retries int, interval time.Duration, f func(ctx context.Context) error) error {
	t := time.NewTimer(interval)
	defer t.Stop()

	var err error
	for attempts := 0; retries == -1 || attempts < retries; attempts++ {
		logrus.Infof("Starting loop %s", name)
		err = f(ctx)
		if err == nil || errors.Is(err, context.Canceled) {
			logrus.Infof("Loop %s gracefully finishing", name)
			return err
		}
		if retries == -1 || attempts+1 < retries {
			logrus.Errorf("Loop %s returned error: %v, restarting", name, err)
			t.Reset(interval)
			select {
			case <-t.C:
			case <-ctx.Done():
				return ctx.Err()
			}
		}
	}
	return err
}
