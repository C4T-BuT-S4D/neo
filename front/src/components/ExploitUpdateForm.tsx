import { ExploitState } from "@/proto/exploits/api";
import { useExploitServiceClient } from "@/services/exploits";
import { formatSeconds, parseDuration } from "@/utils/duration";
import { Button, Grid, Stack, TextField, Typography } from "@mui/material";
import { ClientError } from "nice-grpc-common";
import { SubmitHandler, useForm } from "react-hook-form";

interface P {
  exploit: ExploitState;
  onRefresh: () => void;
}

interface Inputs {
  timeout: string;
  interval: string;
}

export default function ExploitUpdateForm(props: P) {
  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
  } = useForm<Inputs>({
    defaultValues: {
      timeout: formatSeconds(
        props.exploit.config?.timeout?.seconds.toInt() || 0
      ),
      interval: formatSeconds(
        props.exploit.config?.runEvery?.seconds.toInt() || 0
      ),
    },
  });

  const exploitServiceClient = useExploitServiceClient();

  const submitState = async (state: ExploitState) => {
    try {
      await exploitServiceClient.updateExploit({ state });
    } catch (e) {
      if (e instanceof ClientError) {
        setError("root", {
          type: "manual",
          message: e.message,
        });
      }
    }
    props.onRefresh();
  };

  const onSubmit: SubmitHandler<Inputs> = async (inputs: Inputs) => {
    const newState = ExploitState.fromJSON(ExploitState.toJSON(props.exploit));
    if (!newState.config) {
      return;
    }
    newState.config.timeout = parseDuration(inputs.timeout);
    newState.config.runEvery = parseDuration(inputs.interval);
    await submitState(newState);
  };

  const handleDisabledButton = async () => {
    const newState = ExploitState.fromJSON(ExploitState.toJSON(props.exploit));
    if (!newState.config) {
      return;
    }
    newState.config.disabled = !newState.config.disabled;
    await submitState(newState);
  };

  const validateDuration = (value: string) => {
    try {
      parseDuration(value);
      return true;
    } catch (e) {
      if (e instanceof Error) {
        return e.message;
      } else {
        return "unknown error";
      }
    }
  };

  return (
    <>
      <form
        onSubmit={(event) => {
          event.preventDefault();
          void handleSubmit(onSubmit)(event);
        }}
      >
        <Grid rowSpacing={5}>
          <Grid item>
            <Stack spacing={2} direction="row">
              <TextField
                label="Timeout"
                variant="outlined"
                size="small"
                fullWidth
                error={!!errors.timeout}
                helperText={errors.timeout?.message || "Format: 1m30s"}
                {...register("timeout", {
                  required: true,
                  validate: validateDuration,
                })}
              />
              <TextField
                label="Interval"
                variant="outlined"
                size="small"
                fullWidth
                error={!!errors.interval}
                helperText={errors.interval?.message || "Format: 1m30s"}
                {...register("interval", {
                  required: true,
                  validate: validateDuration,
                })}
              />
            </Stack>
          </Grid>
          <Grid item>
            {errors.root && (
              <Typography color="error" fontSize="1em">
                {errors.root.message}
              </Typography>
            )}
          </Grid>
          <Grid item>
            <Stack spacing={2} direction="row">
              <Button
                type="submit"
                className="submit"
                variant="contained"
                size="small"
                color="primary"
              >
                Update
              </Button>
              <Button
                variant="contained"
                size="small"
                color="primary"
                onClick={() => void handleDisabledButton()}
              >
                {props.exploit.config?.disabled ? "Enable" : "Disable"}
              </Button>
            </Stack>
          </Grid>
        </Grid>
      </form>
    </>
  );
}
