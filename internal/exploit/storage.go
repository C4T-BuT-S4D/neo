package exploit

import (
	"context"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"time"

	"neo/internal/client"

	"github.com/sirupsen/logrus"

	neopb "neo/lib/genproto/neo"
)

func NewStorage(cache *Cache, exploitDir string, client *client.Client) *Storage {
	return &Storage{
		cache:      cache,
		exploitDir: exploitDir,
		client:     client,
	}
}

type Storage struct {
	cache      *Cache
	exploitDir string
	client     *client.Client
}

// There is no persistent storage for now. Using only cache.
func (s *Storage) Exploits() (res []*State) {
	return s.cache.Exploits()
}

// There is no persistent storage for now. Using only cache.
func (s *Storage) Exploit(id string) (res *State, ok bool) {
	return s.cache.Exploit(id)
}

func (s *Storage) UpdateLastRun(exploitID string, t time.Time) {
	s.cache.UpdateLastRun(exploitID, t)
}

func (s *Storage) UpdateExploits(ctx context.Context, exs []*neopb.ExploitState) bool {
	diff, restartEndless := s.cache.Diff(exs)
	if len(diff) > 0 {
		logrus.Infof("Got %d updated exploits: %v", len(diff), diff)
	}
	states := make([]*State, 0, len(diff))
	for _, ex := range diff {
		st, err := s.updateExploit(ctx, ex)
		if err != nil {
			logrus.Errorf("Failed to update/download executable(%s:%d): %v", ex.GetExploitId(), ex.GetVersion(), err)
			continue
		}
		states = append(states, st)
	}
	s.cache.Update(states)
	return restartEndless
}

func (s *Storage) updateExploit(ctx context.Context, state *neopb.ExploitState) (*State, error) {
	// Download the current exploit state.
	resp, err := s.client.Exploit(ctx, state.GetExploitId())
	if err != nil {
		return nil, fmt.Errorf("requesting exploit state: %w", err)
	}

	state = resp.GetState()
	cfg := state.GetConfig()

	runEvery, err := time.ParseDuration(cfg.GetRunEvery())
	if err != nil {
		return nil, fmt.Errorf("could not parse run every: %w", err)
	}

	timeout, err := time.ParseDuration(cfg.GetTimeout())
	if err != nil {
		return nil, fmt.Errorf("could not parse timeout: %w", err)
	}

	if err := os.MkdirAll(s.exploitDir, os.ModePerm); err != nil {
		return nil, fmt.Errorf("creating base exploits directory: %w", err)
	}

	// Create temp file for download.
	f, err := os.CreateTemp(s.exploitDir, "DOWNLOAD")
	if err != nil {
		return nil, fmt.Errorf("creating temp file: %w", err)
	}
	defer func() {
		_ = f.Close()
		_ = os.Remove(f.Name())
	}()

	// Download the executable to temp file.
	if err := s.client.DownloadFile(ctx, state.GetFile(), f); err != nil {
		return nil, fmt.Errorf("downloading file: %w", err)
	}
	// Seek to beginning to use file as an io.Reader.
	if _, err := f.Seek(0, io.SeekStart); err != nil {
		return nil, fmt.Errorf("seeking downloaded file: %w", err)
	}

	oPath := filepath.Join(s.exploitDir, fmt.Sprintf("%s_%d", state.GetExploitId(), state.GetVersion()))

	var entryPath string
	if entryPath, err = saveExploit(f, oPath, cfg); err != nil {
		return nil, fmt.Errorf("saving exploit: %w", err)
	}
	logrus.Infof("path = %s, entry = %s", oPath, entryPath)

	if entryPath, err = prepareEntry(entryPath); err != nil {
		return nil, fmt.Errorf("prepairing entry: %w", err)
	}

	res := &State{
		ID:       state.GetExploitId(),
		Version:  state.GetVersion(),
		Dir:      "",
		Path:     entryPath,
		Disabled: state.GetDisabled(),
		Endless:  state.GetEndless(),
		LastRun:  time.Unix(0, 0),
		RunEvery: runEvery,
		Timeout:  timeout,
	}
	if cfg.GetIsArchive() {
		res.Dir = oPath
	}
	return res, nil
}
