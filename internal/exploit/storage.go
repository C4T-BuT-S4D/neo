package exploit

import (
	"context"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"time"

	"github.com/sirupsen/logrus"

	"github.com/c4t-but-s4d/neo/v2/internal/client"
	"github.com/c4t-but-s4d/neo/v2/pkg/archive"
	epb "github.com/c4t-but-s4d/neo/v2/proto/go/exploits"
)

func NewStorage(cache *Cache, exploitDir string, client *client.Client) *Storage {
	return &Storage{
		cache:      cache,
		exploitDir: exploitDir,
		client:     client,
	}
}

type Storage struct {
	cache      *Cache
	exploitDir string
	client     *client.Client
}

func (s *Storage) Exploits() (res []*State) {
	return s.cache.Exploits()
}

func (s *Storage) Exploit(id string) (res *State, ok bool) {
	return s.cache.Exploit(id)
}

func (s *Storage) UpdateLastRun(exploitID string, t time.Time) {
	s.cache.UpdateLastRun(exploitID, t)
}

func (s *Storage) UpdateExploits(ctx context.Context, exs []*epb.ExploitState) bool {
	diff := s.cache.Diff(exs)
	if len(diff) == 0 {
		return false
	}

	logrus.Infof("Got %d updated exploits: %v", len(diff), diff)
	states := make([]*State, 0, len(diff))
	for _, ex := range diff {
		st, err := s.updateExploit(ctx, ex.ExploitId)
		if err != nil {
			logrus.Errorf("Failed to update/download executable(%s:%d): %v", ex.ExploitId, ex.Version, err)
			continue
		}
		states = append(states, st)
	}
	s.cache.Update(states)
	return true
}

func (s *Storage) ScaleTimeouts(workers, teams int) {
	alpha := 0.0
	for _, ex := range s.cache.Exploits() {
		if ex.Endless {
			continue
		}
		alpha += ex.Timeout.Seconds() / ex.RunEvery.Seconds()
	}
	alpha = alpha * float64(teams) / float64(workers)
	logrus.Infof("Scaling timeouts: alpha = %.2f", alpha)
	for _, ex := range s.cache.Exploits() {
		if ex.Endless {
			continue
		}
		newTimeout := time.Duration(float64(ex.Timeout) / alpha)

		// Round down to nearest second.
		newTimeout -= newTimeout % time.Second

		logrus.Infof("Scaling timeout for exploit %s: %s -> %s", ex.ID, ex.ScaledTimeout, newTimeout)
		ex.ScaledTimeout = newTimeout
	}
}

func (s *Storage) updateExploit(ctx context.Context, exploitID string) (*State, error) {
	// Download the current exploit state.
	resp, err := s.client.Exploit(ctx, exploitID)
	if err != nil {
		return nil, fmt.Errorf("requesting exploit state: %w", err)
	}

	state := resp.State
	if state == nil {
		return nil, fmt.Errorf("exploit state is nil")
	}
	if state.File == nil {
		return nil, fmt.Errorf("exploit state file is nil")
	}
	if state.Config == nil {
		return nil, fmt.Errorf("exploit state config is nil")
	}

	if err := os.MkdirAll(s.exploitDir, os.ModePerm); err != nil {
		return nil, fmt.Errorf("creating base exploits directory: %w", err)
	}

	// Create temp file for download.
	f, err := os.CreateTemp(s.exploitDir, "DOWNLOAD")
	if err != nil {
		return nil, fmt.Errorf("creating temp file: %w", err)
	}
	defer func() {
		_ = f.Close()
		_ = os.Remove(f.Name())
	}()

	// Download the executable to temp file.
	if err := s.client.DownloadFile(ctx, state.File, f); err != nil {
		return nil, fmt.Errorf("downloading file: %w", err)
	}
	// Seek to beginning to use file as an io.Reader.
	if _, err := f.Seek(0, io.SeekStart); err != nil {
		return nil, fmt.Errorf("seeking downloaded file: %w", err)
	}

	oPath := filepath.Join(s.exploitDir, fmt.Sprintf("%s_%d", state.ExploitId, state.Version))

	var entryPath string
	if entryPath, err = saveExploit(f, oPath, state.Config); err != nil {
		return nil, fmt.Errorf("saving exploit: %w", err)
	}
	logrus.Infof("path = %s, entry = %s", oPath, entryPath)

	if entryPath, err = prepareEntry(entryPath); err != nil {
		return nil, fmt.Errorf("prepairing entry: %w", err)
	}

	res := &State{
		ID:            state.ExploitId,
		Version:       state.Version,
		Dir:           "",
		Path:          entryPath,
		Disabled:      state.Config.Disabled,
		Endless:       state.Config.Endless,
		RunEvery:      state.Config.RunEvery.AsDuration(),
		ScaledTimeout: state.Config.Timeout.AsDuration(),
		Timeout:       state.Config.Timeout.AsDuration(),
	}
	if state.Config.IsArchive {
		res.Dir = oPath
	}
	return res, nil
}

func saveExploit(f *os.File, outPath string, cfg *epb.ExploitConfiguration) (string, error) {
	if cfg.IsArchive {
		if err := archive.Untar(outPath, f); err != nil {
			return "", fmt.Errorf("unarchiving: %w", err)
		}
		return filepath.Join(outPath, cfg.Entrypoint), nil
	}

	if err := f.Close(); err != nil {
		return "", fmt.Errorf("closing file: %w", err)
	}
	if err := os.Rename(f.Name(), outPath); err != nil {
		return "", fmt.Errorf("renaming file %s to %s: %w", f.Name(), outPath, err)
	}
	return outPath, nil
}

func prepareEntry(path string) (string, error) {
	absPath, err := filepath.Abs(path)
	if err != nil {
		return "", fmt.Errorf("taking absolute path: %w", err)
	}
	if err := os.Chmod(absPath, 0755); err != nil {
		return "", fmt.Errorf("setting permissions: %w", err)
	}
	return absPath, nil
}
