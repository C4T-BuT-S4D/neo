package exploit

import (
	"fmt"
	"io/ioutil"
	"os"
	"testing"
)

func mockStorage() (*Storage, func() error) {
	name, err := ioutil.TempDir("", "testStorage")
	if err != nil {
		panic(err)
	}

	return NewStorage(NewCache(), name, nil), func() error {
		if err != nil {
			return fmt.Errorf("remove exploit storage: %w", os.RemoveAll(name))
		}
		return nil
	}
}

func TestStorage_Exploit(t *testing.T) {
	st, cleanup := mockStorage()
	defer func() {
		if err := cleanup(); err != nil {
			t.Fatalf("Failed to cleanup mock storage: %v", err)
		}
	}()
	st.cache.Update([]*State{
		{ID: "1", Version: 1},
	})
	res, ok := st.Exploit("1")
	if !ok {
		t.Errorf("storage.Exploit(): failed to find exploit in cache")
	}
	if res.Version != 1 {
		t.Errorf("storage.Exploit(): invalid exploit returned")
	}
}
