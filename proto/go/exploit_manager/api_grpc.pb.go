// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: exploit_manager/api.proto

package exploit_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Exploit(ctx context.Context, in *ExploitRequest, opts ...grpc.CallOption) (*ExploitResponse, error)
	UpdateExploit(ctx context.Context, in *UpdateExploitRequest, opts ...grpc.CallOption) (*UpdateExploitResponse, error)
	BroadcastCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BroadcastRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Service_BroadcastRequestsClient, error)
	SingleRun(ctx context.Context, in *SingleRunRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SingleRunRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Service_SingleRunRequestsClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/exploit_manager.Service/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Exploit(ctx context.Context, in *ExploitRequest, opts ...grpc.CallOption) (*ExploitResponse, error) {
	out := new(ExploitResponse)
	err := c.cc.Invoke(ctx, "/exploit_manager.Service/Exploit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateExploit(ctx context.Context, in *UpdateExploitRequest, opts ...grpc.CallOption) (*UpdateExploitResponse, error) {
	out := new(UpdateExploitResponse)
	err := c.cc.Invoke(ctx, "/exploit_manager.Service/UpdateExploit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BroadcastCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/exploit_manager.Service/BroadcastCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BroadcastRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Service_BroadcastRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], "/exploit_manager.Service/BroadcastRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceBroadcastRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_BroadcastRequestsClient interface {
	Recv() (*Command, error)
	grpc.ClientStream
}

type serviceBroadcastRequestsClient struct {
	grpc.ClientStream
}

func (x *serviceBroadcastRequestsClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) SingleRun(ctx context.Context, in *SingleRunRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/exploit_manager.Service/SingleRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SingleRunRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Service_SingleRunRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], "/exploit_manager.Service/SingleRunRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceSingleRunRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_SingleRunRequestsClient interface {
	Recv() (*SingleRunRequest, error)
	grpc.ClientStream
}

type serviceSingleRunRequestsClient struct {
	grpc.ClientStream
}

func (x *serviceSingleRunRequestsClient) Recv() (*SingleRunRequest, error) {
	m := new(SingleRunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Exploit(context.Context, *ExploitRequest) (*ExploitResponse, error)
	UpdateExploit(context.Context, *UpdateExploitRequest) (*UpdateExploitResponse, error)
	BroadcastCommand(context.Context, *Command) (*emptypb.Empty, error)
	BroadcastRequests(*emptypb.Empty, Service_BroadcastRequestsServer) error
	SingleRun(context.Context, *SingleRunRequest) (*emptypb.Empty, error)
	SingleRunRequests(*emptypb.Empty, Service_SingleRunRequestsServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServiceServer) Exploit(context.Context, *ExploitRequest) (*ExploitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exploit not implemented")
}
func (UnimplementedServiceServer) UpdateExploit(context.Context, *UpdateExploitRequest) (*UpdateExploitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExploit not implemented")
}
func (UnimplementedServiceServer) BroadcastCommand(context.Context, *Command) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastCommand not implemented")
}
func (UnimplementedServiceServer) BroadcastRequests(*emptypb.Empty, Service_BroadcastRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastRequests not implemented")
}
func (UnimplementedServiceServer) SingleRun(context.Context, *SingleRunRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleRun not implemented")
}
func (UnimplementedServiceServer) SingleRunRequests(*emptypb.Empty, Service_SingleRunRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SingleRunRequests not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exploit_manager.Service/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Exploit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Exploit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exploit_manager.Service/Exploit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Exploit(ctx, req.(*ExploitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateExploit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExploitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateExploit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exploit_manager.Service/UpdateExploit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateExploit(ctx, req.(*UpdateExploitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_BroadcastCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).BroadcastCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exploit_manager.Service/BroadcastCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).BroadcastCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_BroadcastRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).BroadcastRequests(m, &serviceBroadcastRequestsServer{stream})
}

type Service_BroadcastRequestsServer interface {
	Send(*Command) error
	grpc.ServerStream
}

type serviceBroadcastRequestsServer struct {
	grpc.ServerStream
}

func (x *serviceBroadcastRequestsServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_SingleRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SingleRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exploit_manager.Service/SingleRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SingleRun(ctx, req.(*SingleRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SingleRunRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).SingleRunRequests(m, &serviceSingleRunRequestsServer{stream})
}

type Service_SingleRunRequestsServer interface {
	Send(*SingleRunRequest) error
	grpc.ServerStream
}

type serviceSingleRunRequestsServer struct {
	grpc.ServerStream
}

func (x *serviceSingleRunRequestsServer) Send(m *SingleRunRequest) error {
	return x.ServerStream.SendMsg(m)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exploit_manager.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Service_Ping_Handler,
		},
		{
			MethodName: "Exploit",
			Handler:    _Service_Exploit_Handler,
		},
		{
			MethodName: "UpdateExploit",
			Handler:    _Service_UpdateExploit_Handler,
		},
		{
			MethodName: "BroadcastCommand",
			Handler:    _Service_BroadcastCommand_Handler,
		},
		{
			MethodName: "SingleRun",
			Handler:    _Service_SingleRun_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BroadcastRequests",
			Handler:       _Service_BroadcastRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SingleRunRequests",
			Handler:       _Service_SingleRunRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exploit_manager/api.proto",
}
