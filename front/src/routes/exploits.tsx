import ExploitsView from "@/components/ExploitsView";
import { ExploitState } from "@/proto/exploits/api";
import { useExploitServiceClient } from "@/services/exploits";
import { Box } from "@mui/material";
import { useCallback, useEffect, useState } from "react";
import { Helmet } from "react-helmet-async";

interface S {
  exploits: ExploitState[];
}

export default function ExploitsContainer() {
  const [state, setState] = useState<S>();

  const exploitServiceClient = useExploitServiceClient();

  const fetchExploits = useCallback(async () => {
    const response = await exploitServiceClient.ping({
      payload: { $case: "serverInfoRequest", serverInfoRequest: {} },
    });
    setState({
      exploits:
        response.state?.exploits.sort((e1: ExploitState, e2: ExploitState) => {
          return e1.exploitId.localeCompare(e2.exploitId);
        }) || [],
    });
  }, [exploitServiceClient]);

  useEffect(() => {
    void fetchExploits();
  }, [exploitServiceClient, fetchExploits]);

  return (
    <>
      <Helmet>
        <title>Neo Exploits</title>
      </Helmet>
      <Box>
        {state && (
          <ExploitsView
            exploits={state.exploits}
            onRefresh={() => {
              void fetchExploits();
            }}
          />
        )}
      </Box>
    </>
  );
}
