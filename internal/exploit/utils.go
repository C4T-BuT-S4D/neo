package exploit

import (
	"context"
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/sirupsen/logrus"

	epb "github.com/c4t-but-s4d/neo/proto/go/exploits"

	"github.com/c4t-but-s4d/neo/pkg/archive"
)

func saveExploit(f *os.File, outPath string, cfg *epb.ExploitConfiguration) (string, error) {
	if cfg.IsArchive {
		if err := archive.Untar(outPath, f); err != nil {
			return "", fmt.Errorf("unarchiving: %w", err)
		}
		return filepath.Join(outPath, cfg.Entrypoint), nil
	}

	if err := f.Close(); err != nil {
		return "", fmt.Errorf("closing file: %w", err)
	}
	if err := os.Rename(f.Name(), outPath); err != nil {
		return "", fmt.Errorf("renaming file %s to %s: %w", f.Name(), outPath, err)
	}
	return outPath, nil
}

func prepareEntry(path string) (string, error) {
	absPath, err := filepath.Abs(path)
	if err != nil {
		return "", fmt.Errorf("taking absolute path: %w", err)
	}
	if err := os.Chmod(absPath, 0755); err != nil {
		return "", fmt.Errorf("setting permissions: %w", err)
	}
	return absPath, nil
}

func retryLoop(ctx context.Context, name string, retries int, interval time.Duration, f func(ctx context.Context) error) error {
	t := time.NewTimer(interval)
	defer t.Stop()

	var err error
	for attempts := 0; retries == -1 || attempts < retries; attempts++ {
		logrus.Infof("Starting loop %s", name)
		err = f(ctx)
		if err == nil || errors.Is(err, context.Canceled) {
			logrus.Infof("Loop %s gracefully finishing", name)
			return err
		}
		if retries == -1 || attempts+1 < retries {
			logrus.Errorf("Loop %s returned error: %v, restarting", name, err)
			t.Reset(interval)
			select {
			case <-t.C:
			case <-ctx.Done():
				return ctx.Err()
			}
		}
	}
	return err
}
