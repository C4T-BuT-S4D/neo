package exploit

import (
	"context"
	"io"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func Test_retryLoop(t *testing.T) {
	tests := []struct {
		name      string
		retries   int
		doRetries int
		returnErr error
		lastErr   error
		wantErr   error
	}{
		{
			"simple",
			1,
			1,
			ErrFinishedUnexpectedly,
			nil,
			nil,
		},
		{
			"endless retries",
			-1,
			100,
			ErrFinishedUnexpectedly,
			nil,
			nil,
		},
		{
			"return last error",
			1,
			5,
			io.EOF,
			nil,
			io.EOF,
		},
		{
			"context cancelled",
			5,
			3,
			ErrFinishedUnexpectedly,
			context.Canceled,
			context.Canceled,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cnt := 0
			f := func(context.Context) error {
				cnt++
				if cnt < tt.doRetries {
					return tt.returnErr
				}
				return tt.lastErr
			}
			ctx, cancel := context.WithCancel(context.Background())
			defer cancel()
			require.ErrorIs(t, retryLoop(ctx, "test", tt.retries, time.Millisecond, f), tt.wantErr)
			if tt.retries != -1 && tt.doRetries > tt.retries {
				require.Equal(t, tt.retries, cnt)
			} else {
				require.Equal(t, tt.doRetries, cnt)
			}
		})
	}
}
