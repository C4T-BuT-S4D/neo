// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: neo.proto

package neo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExploitManagerClient is the client API for ExploitManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExploitManagerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (ExploitManager_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (ExploitManager_DownloadFileClient, error)
	Exploit(ctx context.Context, in *ExploitRequest, opts ...grpc.CallOption) (*ExploitResponse, error)
	UpdateExploit(ctx context.Context, in *UpdateExploitRequest, opts ...grpc.CallOption) (*UpdateExploitResponse, error)
	BroadcastCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BroadcastRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ExploitManager_BroadcastRequestsClient, error)
	SingleRun(ctx context.Context, in *SingleRunRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SingleRunRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ExploitManager_SingleRunRequestsClient, error)
	AddLogLines(ctx context.Context, in *AddLogLinesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchLogLines(ctx context.Context, in *SearchLogLinesRequest, opts ...grpc.CallOption) (ExploitManager_SearchLogLinesClient, error)
}

type exploitManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewExploitManagerClient(cc grpc.ClientConnInterface) ExploitManagerClient {
	return &exploitManagerClient{cc}
}

func (c *exploitManagerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/neo.ExploitManager/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploitManagerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (ExploitManager_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExploitManager_ServiceDesc.Streams[0], "/neo.ExploitManager/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &exploitManagerUploadFileClient{stream}
	return x, nil
}

type ExploitManager_UploadFileClient interface {
	Send(*FileStream) error
	CloseAndRecv() (*FileInfo, error)
	grpc.ClientStream
}

type exploitManagerUploadFileClient struct {
	grpc.ClientStream
}

func (x *exploitManagerUploadFileClient) Send(m *FileStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exploitManagerUploadFileClient) CloseAndRecv() (*FileInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exploitManagerClient) DownloadFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (ExploitManager_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExploitManager_ServiceDesc.Streams[1], "/neo.ExploitManager/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &exploitManagerDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExploitManager_DownloadFileClient interface {
	Recv() (*FileStream, error)
	grpc.ClientStream
}

type exploitManagerDownloadFileClient struct {
	grpc.ClientStream
}

func (x *exploitManagerDownloadFileClient) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exploitManagerClient) Exploit(ctx context.Context, in *ExploitRequest, opts ...grpc.CallOption) (*ExploitResponse, error) {
	out := new(ExploitResponse)
	err := c.cc.Invoke(ctx, "/neo.ExploitManager/Exploit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploitManagerClient) UpdateExploit(ctx context.Context, in *UpdateExploitRequest, opts ...grpc.CallOption) (*UpdateExploitResponse, error) {
	out := new(UpdateExploitResponse)
	err := c.cc.Invoke(ctx, "/neo.ExploitManager/UpdateExploit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploitManagerClient) BroadcastCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neo.ExploitManager/BroadcastCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploitManagerClient) BroadcastRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ExploitManager_BroadcastRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExploitManager_ServiceDesc.Streams[2], "/neo.ExploitManager/BroadcastRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &exploitManagerBroadcastRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExploitManager_BroadcastRequestsClient interface {
	Recv() (*Command, error)
	grpc.ClientStream
}

type exploitManagerBroadcastRequestsClient struct {
	grpc.ClientStream
}

func (x *exploitManagerBroadcastRequestsClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exploitManagerClient) SingleRun(ctx context.Context, in *SingleRunRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neo.ExploitManager/SingleRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploitManagerClient) SingleRunRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ExploitManager_SingleRunRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExploitManager_ServiceDesc.Streams[3], "/neo.ExploitManager/SingleRunRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &exploitManagerSingleRunRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExploitManager_SingleRunRequestsClient interface {
	Recv() (*SingleRunRequest, error)
	grpc.ClientStream
}

type exploitManagerSingleRunRequestsClient struct {
	grpc.ClientStream
}

func (x *exploitManagerSingleRunRequestsClient) Recv() (*SingleRunRequest, error) {
	m := new(SingleRunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exploitManagerClient) AddLogLines(ctx context.Context, in *AddLogLinesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neo.ExploitManager/AddLogLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploitManagerClient) SearchLogLines(ctx context.Context, in *SearchLogLinesRequest, opts ...grpc.CallOption) (ExploitManager_SearchLogLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExploitManager_ServiceDesc.Streams[4], "/neo.ExploitManager/SearchLogLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &exploitManagerSearchLogLinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExploitManager_SearchLogLinesClient interface {
	Recv() (*SearchLogLinesResponse, error)
	grpc.ClientStream
}

type exploitManagerSearchLogLinesClient struct {
	grpc.ClientStream
}

func (x *exploitManagerSearchLogLinesClient) Recv() (*SearchLogLinesResponse, error) {
	m := new(SearchLogLinesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExploitManagerServer is the server API for ExploitManager service.
// All implementations must embed UnimplementedExploitManagerServer
// for forward compatibility
type ExploitManagerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	UploadFile(ExploitManager_UploadFileServer) error
	DownloadFile(*FileInfo, ExploitManager_DownloadFileServer) error
	Exploit(context.Context, *ExploitRequest) (*ExploitResponse, error)
	UpdateExploit(context.Context, *UpdateExploitRequest) (*UpdateExploitResponse, error)
	BroadcastCommand(context.Context, *Command) (*emptypb.Empty, error)
	BroadcastRequests(*emptypb.Empty, ExploitManager_BroadcastRequestsServer) error
	SingleRun(context.Context, *SingleRunRequest) (*emptypb.Empty, error)
	SingleRunRequests(*emptypb.Empty, ExploitManager_SingleRunRequestsServer) error
	AddLogLines(context.Context, *AddLogLinesRequest) (*emptypb.Empty, error)
	SearchLogLines(*SearchLogLinesRequest, ExploitManager_SearchLogLinesServer) error
	mustEmbedUnimplementedExploitManagerServer()
}

// UnimplementedExploitManagerServer must be embedded to have forward compatible implementations.
type UnimplementedExploitManagerServer struct {
}

func (UnimplementedExploitManagerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedExploitManagerServer) UploadFile(ExploitManager_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedExploitManagerServer) DownloadFile(*FileInfo, ExploitManager_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedExploitManagerServer) Exploit(context.Context, *ExploitRequest) (*ExploitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exploit not implemented")
}
func (UnimplementedExploitManagerServer) UpdateExploit(context.Context, *UpdateExploitRequest) (*UpdateExploitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExploit not implemented")
}
func (UnimplementedExploitManagerServer) BroadcastCommand(context.Context, *Command) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastCommand not implemented")
}
func (UnimplementedExploitManagerServer) BroadcastRequests(*emptypb.Empty, ExploitManager_BroadcastRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastRequests not implemented")
}
func (UnimplementedExploitManagerServer) SingleRun(context.Context, *SingleRunRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleRun not implemented")
}
func (UnimplementedExploitManagerServer) SingleRunRequests(*emptypb.Empty, ExploitManager_SingleRunRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SingleRunRequests not implemented")
}
func (UnimplementedExploitManagerServer) AddLogLines(context.Context, *AddLogLinesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogLines not implemented")
}
func (UnimplementedExploitManagerServer) SearchLogLines(*SearchLogLinesRequest, ExploitManager_SearchLogLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchLogLines not implemented")
}
func (UnimplementedExploitManagerServer) mustEmbedUnimplementedExploitManagerServer() {}

// UnsafeExploitManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExploitManagerServer will
// result in compilation errors.
type UnsafeExploitManagerServer interface {
	mustEmbedUnimplementedExploitManagerServer()
}

func RegisterExploitManagerServer(s grpc.ServiceRegistrar, srv ExploitManagerServer) {
	s.RegisterService(&ExploitManager_ServiceDesc, srv)
}

func _ExploitManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploitManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neo.ExploitManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploitManagerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploitManager_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExploitManagerServer).UploadFile(&exploitManagerUploadFileServer{stream})
}

type ExploitManager_UploadFileServer interface {
	SendAndClose(*FileInfo) error
	Recv() (*FileStream, error)
	grpc.ServerStream
}

type exploitManagerUploadFileServer struct {
	grpc.ServerStream
}

func (x *exploitManagerUploadFileServer) SendAndClose(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exploitManagerUploadFileServer) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExploitManager_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExploitManagerServer).DownloadFile(m, &exploitManagerDownloadFileServer{stream})
}

type ExploitManager_DownloadFileServer interface {
	Send(*FileStream) error
	grpc.ServerStream
}

type exploitManagerDownloadFileServer struct {
	grpc.ServerStream
}

func (x *exploitManagerDownloadFileServer) Send(m *FileStream) error {
	return x.ServerStream.SendMsg(m)
}

func _ExploitManager_Exploit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploitManagerServer).Exploit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neo.ExploitManager/Exploit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploitManagerServer).Exploit(ctx, req.(*ExploitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploitManager_UpdateExploit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExploitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploitManagerServer).UpdateExploit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neo.ExploitManager/UpdateExploit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploitManagerServer).UpdateExploit(ctx, req.(*UpdateExploitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploitManager_BroadcastCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploitManagerServer).BroadcastCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neo.ExploitManager/BroadcastCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploitManagerServer).BroadcastCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploitManager_BroadcastRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExploitManagerServer).BroadcastRequests(m, &exploitManagerBroadcastRequestsServer{stream})
}

type ExploitManager_BroadcastRequestsServer interface {
	Send(*Command) error
	grpc.ServerStream
}

type exploitManagerBroadcastRequestsServer struct {
	grpc.ServerStream
}

func (x *exploitManagerBroadcastRequestsServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func _ExploitManager_SingleRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploitManagerServer).SingleRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neo.ExploitManager/SingleRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploitManagerServer).SingleRun(ctx, req.(*SingleRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploitManager_SingleRunRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExploitManagerServer).SingleRunRequests(m, &exploitManagerSingleRunRequestsServer{stream})
}

type ExploitManager_SingleRunRequestsServer interface {
	Send(*SingleRunRequest) error
	grpc.ServerStream
}

type exploitManagerSingleRunRequestsServer struct {
	grpc.ServerStream
}

func (x *exploitManagerSingleRunRequestsServer) Send(m *SingleRunRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _ExploitManager_AddLogLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploitManagerServer).AddLogLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neo.ExploitManager/AddLogLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploitManagerServer).AddLogLines(ctx, req.(*AddLogLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploitManager_SearchLogLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchLogLinesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExploitManagerServer).SearchLogLines(m, &exploitManagerSearchLogLinesServer{stream})
}

type ExploitManager_SearchLogLinesServer interface {
	Send(*SearchLogLinesResponse) error
	grpc.ServerStream
}

type exploitManagerSearchLogLinesServer struct {
	grpc.ServerStream
}

func (x *exploitManagerSearchLogLinesServer) Send(m *SearchLogLinesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ExploitManager_ServiceDesc is the grpc.ServiceDesc for ExploitManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExploitManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neo.ExploitManager",
	HandlerType: (*ExploitManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ExploitManager_Ping_Handler,
		},
		{
			MethodName: "Exploit",
			Handler:    _ExploitManager_Exploit_Handler,
		},
		{
			MethodName: "UpdateExploit",
			Handler:    _ExploitManager_UpdateExploit_Handler,
		},
		{
			MethodName: "BroadcastCommand",
			Handler:    _ExploitManager_BroadcastCommand_Handler,
		},
		{
			MethodName: "SingleRun",
			Handler:    _ExploitManager_SingleRun_Handler,
		},
		{
			MethodName: "AddLogLines",
			Handler:    _ExploitManager_AddLogLines_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _ExploitManager_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _ExploitManager_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BroadcastRequests",
			Handler:       _ExploitManager_BroadcastRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SingleRunRequests",
			Handler:       _ExploitManager_SingleRunRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchLogLines",
			Handler:       _ExploitManager_SearchLogLines_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "neo.proto",
}
